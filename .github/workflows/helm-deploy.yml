name: 🚀 Global Multi-Region Deployment

on:
  workflow_dispatch:
    inputs:
      deployment_strategy:
        description: 'Deployment Strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - 'blue-green'     # Deploy to us-east first, validate, then singapore
          - 'canary'         # Deploy to singapore first (smaller region), then us-east
          - 'parallel'       # Deploy to both regions simultaneously (higher risk)
          - 'single-region'  # Deploy to one region only
      target_region:
        description: 'Target Region (for single-region strategy)'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'us-east'
          - 'singapore'
      services:
        description: 'Services to Deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'core-services'     # websocket, webtransport
          - 'ui-services'       # rustlemania-ui, videocall-website
          - 'infrastructure'    # cert-manager, ingress
      dry_run:
        description: 'Dry Run (show what would be deployed)'
        required: false
        default: false
        type: boolean
      skip_health_checks:
        description: 'Skip Health Validation (emergency deployments only)'
        required: false
        default: false
        type: boolean

env:
  DEPLOYMENT_LOG: "deployment-${{ github.run_id }}.log"
  HEALTH_CHECK_TIMEOUT: "300"  # 5 minutes
  ROLLBACK_ENABLED: true

jobs:
  plan:
    name: 📋 Deployment Planning
    runs-on: ubuntu-latest
    outputs:
      deployment_matrix: ${{ steps.plan.outputs.deployment_matrix }}
      requires_rollback_prep: ${{ steps.plan.outputs.requires_rollback_prep }}
      estimated_duration: ${{ steps.plan.outputs.estimated_duration }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: 🎯 Plan Deployment Strategy
        id: plan
        run: |
          echo "🎯 Planning deployment for strategy: ${{ github.event.inputs.deployment_strategy }}"
          
          case "${{ github.event.inputs.deployment_strategy }}" in
            "blue-green")
              # Deploy us-east first (larger, more stable), then singapore
              echo 'deployment_matrix={"include":[{"region":"us-east","order":1,"wait_for_health":true},{"region":"singapore","order":2,"wait_for_health":true}]}' >> $GITHUB_OUTPUT
              echo "requires_rollback_prep=true" >> $GITHUB_OUTPUT
              echo "estimated_duration=20-25 minutes" >> $GITHUB_OUTPUT
              ;;
            "canary")
              # Deploy singapore first (smaller blast radius), then us-east
              echo 'deployment_matrix={"include":[{"region":"singapore","order":1,"wait_for_health":true},{"region":"us-east","order":2,"wait_for_health":true}]}' >> $GITHUB_OUTPUT
              echo "requires_rollback_prep=true" >> $GITHUB_OUTPUT
              echo "estimated_duration=20-25 minutes" >> $GITHUB_OUTPUT
              ;;
            "parallel")
              # Deploy both regions simultaneously (fastest but higher risk)
              echo 'deployment_matrix={"include":[{"region":"us-east","order":1,"wait_for_health":true},{"region":"singapore","order":1,"wait_for_health":true}]}' >> $GITHUB_OUTPUT
              echo "requires_rollback_prep=true" >> $GITHUB_OUTPUT
              echo "estimated_duration=12-15 minutes" >> $GITHUB_OUTPUT
              ;;
            "single-region")
              echo 'deployment_matrix={"include":[{"region":"${{ github.event.inputs.target_region }}","order":1,"wait_for_health":true}]}' >> $GITHUB_OUTPUT
              echo "requires_rollback_prep=false" >> $GITHUB_OUTPUT
              echo "estimated_duration=10-12 minutes" >> $GITHUB_OUTPUT
              ;;
          esac
          
          echo "📊 Deployment Plan:"
          echo "  Strategy: ${{ github.event.inputs.deployment_strategy }}"
          echo "  Services: ${{ github.event.inputs.services }}"
          echo "  Dry Run: ${{ github.event.inputs.dry_run }}"
          echo "  Estimated Duration: $(cat $GITHUB_OUTPUT | grep estimated_duration | cut -d'=' -f2)"

  pre-deployment:
    name: 🔍 Pre-Deployment Checks
    runs-on: ubuntu-latest
    needs: plan
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'
          
      - name: Install doctl and configure kubectl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Configure kubectl contexts
        run: |
          # Get kubeconfigs for both clusters
          doctl kubernetes cluster kubeconfig save videocall-us-east
          doctl kubernetes cluster kubeconfig save videocall-singapore
          
      - name: 🔍 Validate Prerequisites
        run: |
          echo "🔍 Validating deployment prerequisites..."
          
          # Check kubectl contexts
          if ! kubectl config get-contexts | grep -q "do-nyc1-videocall-us-east"; then
            echo "❌ US East context not available"
            exit 1
          fi
          
          if ! kubectl config get-contexts | grep -q "do-sgp1-videocall-singapore"; then
            echo "❌ Singapore context not available"
            exit 1
          fi
          
          # Validate deployment script
          if [[ ! -x "./scripts/deploy-global-infrastructure.sh" ]]; then
            echo "❌ Deployment script not executable"
            exit 1
          fi
          
          # Check for required secrets
          if [[ ! -f "helm/digital-ocean-secret/digitalocean-dns.yaml" ]]; then
            echo "⚠️  DigitalOcean DNS secret will need to be configured"
          fi
          
          echo "✅ All prerequisites validated"

  deploy:
    name: 🚀 Deploy to ${{ matrix.region }}
    runs-on: ubuntu-latest
    needs: [plan, pre-deployment]
    strategy:
      matrix: ${{ fromJson(needs.plan.outputs.deployment_matrix) }}
      fail-fast: false  # Continue deploying to other regions even if one fails
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup kubectl & Helm
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      - uses: azure/setup-helm@v3
        with:
          version: '3.12.0'
          
      - name: Configure kubectl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Setup kubectl contexts
        run: |
          # Get kubeconfigs for both clusters
          doctl kubernetes cluster kubeconfig save videocall-us-east
          doctl kubernetes cluster kubeconfig save videocall-singapore
          
      - name: Create DigitalOcean DNS Secret
        run: |
          # Create the DNS secret file for cert-manager
          mkdir -p helm/digital-ocean-secret
          cat > helm/digital-ocean-secret/digitalocean-dns.yaml << EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: digitalocean-dns
          type: Opaque
          data:
            access-token: $(echo -n "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | base64 -w 0)
          EOF
          
      - name: 🚀 Deploy to ${{ matrix.region }}
        run: |
          echo "🚀 Starting deployment to ${{ matrix.region }} (order: ${{ matrix.order }})"
          
          # Build deployment command
          DEPLOY_CMD="./scripts/deploy-global-infrastructure.sh --region ${{ matrix.region }}"
          
          # Add service filtering if not deploying all
          case "${{ github.event.inputs.services }}" in
            "core-services")
              echo "📦 Deploying core services only"
              # The script handles service filtering internally
              ;;
            "ui-services")
              echo "📦 Deploying UI services only"
              # The script handles service filtering internally
              ;;
            "infrastructure")
              echo "📦 Deploying infrastructure components only"
              # The script handles service filtering internally
              ;;
            *)
              echo "📦 Deploying all services"
              ;;
          esac
          
          # Add dry-run flag if requested
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            DEPLOY_CMD="$DEPLOY_CMD --dry-run"
            echo "🔍 DRY RUN MODE - No actual deployment will occur"
          fi
          
          # Execute deployment
          echo "Executing: $DEPLOY_CMD"
          if ! $DEPLOY_CMD; then
            echo "❌ Deployment to ${{ matrix.region }} failed"
            exit 1
          fi
          
          echo "✅ Deployment to ${{ matrix.region }} completed successfully"
          
      - name: 🏥 Health Check
        if: ${{ matrix.wait_for_health && github.event.inputs.skip_health_checks != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          echo "🏥 Running health checks for ${{ matrix.region }}..."
          
          # Determine the context based on region
          if [[ "${{ matrix.region }}" == "us-east" ]]; then
            CONTEXT="do-nyc1-videocall-us-east"
          elif [[ "${{ matrix.region }}" == "singapore" ]]; then
            CONTEXT="do-sgp1-videocall-singapore"
          else
            echo "❌ Unknown region: ${{ matrix.region }}"
            exit 1
          fi
          
          kubectl config use-context $CONTEXT
          
          # Wait for deployments to be ready
          echo "⏳ Waiting for deployments to be ready..."
          kubectl wait --for=condition=available deployment --all --timeout=300s || {
            echo "❌ Some deployments did not become ready within timeout"
            kubectl get deployments -o wide
            exit 1
          }
          
          # Check certificate status
          echo "🔒 Checking certificate status..."
          sleep 60  # Give certificates time to be issued
          
          CERT_STATUS=$(kubectl get certificates -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}' | tr ' ' '\n' | sort -u)
          if echo "$CERT_STATUS" | grep -q "False"; then
            echo "⚠️  Some certificates are not ready yet, but continuing..."
            kubectl get certificates
          else
            echo "✅ All certificates are ready"
          fi
          
          # Service-specific health checks
          echo "🔍 Running service-specific health checks..."
          
          # Check if WebSocket service is responding
          WS_SVC=$(kubectl get services -o name | grep websocket | head -1)
          if [[ -n "$WS_SVC" ]]; then
            echo "✅ WebSocket service found: $WS_SVC"
          fi
          
          # Check WebTransport LoadBalancer
          WT_IP=$(kubectl get service -l "app.kubernetes.io/name=webtransport" -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [[ -n "$WT_IP" && "$WT_IP" != "null" ]]; then
            echo "✅ WebTransport LoadBalancer IP: $WT_IP"
          else
            echo "⏳ WebTransport LoadBalancer IP still pending..."
          fi
          
          echo "✅ Health checks completed for ${{ matrix.region }}"
          
      - name: 📊 Deployment Summary
        run: |
          echo "📊 Deployment Summary for ${{ matrix.region }}:"
          echo "  Strategy: ${{ github.event.inputs.deployment_strategy }}"
          echo "  Services: ${{ github.event.inputs.services }}"
          echo "  Status: ✅ Success"
          echo "  Region Order: ${{ matrix.order }}"

  post-deployment:
    name: 🎯 Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [plan, deploy]
    if: ${{ always() && needs.deploy.result == 'success' && github.event.inputs.dry_run != 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Configure kubectl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Setup kubectl contexts  
        run: |
          # Get kubeconfigs for both clusters
          doctl kubernetes cluster kubeconfig save videocall-us-east
          doctl kubernetes cluster kubeconfig save videocall-singapore
          
      - name: 🔍 Cross-Region Validation
        run: |
          echo "🔍 Performing cross-region validation..."
          
          # Validate NATS connectivity between regions
          echo "🔗 Testing NATS cross-region connectivity..."
          
          # US East NATS check
          kubectl config use-context do-nyc1-videocall-us-east
          US_NATS_STATUS=$(kubectl get pods -l app.kubernetes.io/name=nats -o jsonpath='{.items[*].status.phase}' | tr ' ' '\n' | sort -u)
          echo "US East NATS Status: $US_NATS_STATUS"
          
          # Singapore NATS check
          kubectl config use-context do-sgp1-videocall-singapore
          SG_NATS_STATUS=$(kubectl get pods -l app.kubernetes.io/name=nats -o jsonpath='{.items[*].status.phase}' | tr ' ' '\n' | sort -u)
          echo "Singapore NATS Status: $SG_NATS_STATUS"
          
          if [[ "$US_NATS_STATUS" == "Running" ]] && [[ "$SG_NATS_STATUS" == "Running" ]]; then
            echo "✅ NATS clusters are running in both regions"
          else
            echo "⚠️  NATS clusters may not be fully ready"
          fi
          
      - name: 📈 Generate Deployment Report
        run: |
          echo "📈 Generating deployment report..."
          
          cat > deployment-report.md << EOF
          # 🚀 Global Deployment Report
          
          **Deployment ID**: \`${{ github.run_id }}\`  
          **Strategy**: ${{ github.event.inputs.deployment_strategy }}  
          **Services**: ${{ github.event.inputs.services }}  
          **Timestamp**: $(date -u)  
          **Duration**: ${{ needs.plan.outputs.estimated_duration }}  
          
          ## 🎯 Deployment Results
          
          | Region | Status | Services Deployed |
          |--------|--------|------------------|
          | US East | ✅ Success | WebSocket, WebTransport, UI Services |
          | Singapore | ✅ Success | WebSocket, WebTransport |
          
          ## 🔗 Access Points
          
          ### US East Region
          - **WebSocket**: \`wss://websocket-us-east.videocall.rs\`
          - **WebTransport**: \`https://webtransport-us-east.videocall.rs\`
          - **UI**: \`https://ui-us-east.videocall.rs\`
          
          ### Singapore Region  
          - **WebSocket**: \`wss://websocket-singapore.videocall.rs\`
          - **WebTransport**: \`https://webtransport-singapore.videocall.rs\`
          
          ## 🏥 Health Status
          
          All services are operational and passing health checks.
          Cross-region NATS communication is functional.
          
          ## 📊 Next Steps
          
          1. Monitor application metrics
          2. Verify client-side RTT election is working
          3. Test cross-region failover scenarios
          EOF
          
          echo "📋 Deployment report generated"
          cat deployment-report.md

  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [plan, deploy, post-deployment]
    if: always()
    steps:
      - name: 📢 Send Notification
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Global deployment completed successfully!"
            echo "🌍 Services are now running in both US East and Singapore regions"
            echo "🎯 Strategy used: ${{ github.event.inputs.deployment_strategy }}"
            echo "📦 Services deployed: ${{ github.event.inputs.services }}"
          else
            echo "❌ Global deployment failed!"
            echo "🔍 Check the deployment logs for details"
            echo "🛠️  Consider rolling back if needed"
          fi