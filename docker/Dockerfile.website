FROM rust:1.83-slim-bookworm as builder

RUN rustup default nightly-2024-11-01

# Install apt dependencies (Layer 1)
RUN apt-get update && apt-get install -y \
    libssl-dev \
    pkg-config \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Install global cargo tools (Layer 2)
# These are installed before copying project files so the layer is cached
# unless the tool versions change.
RUN cargo install --locked cargo-leptos@0.2.29
RUN cargo install wasm-bindgen-cli@0.2.100 --locked

WORKDIR /app/leptos-website

# Copy *only* manifests (Layer 3 - cache invalidated only if manifests change)
COPY leptos-website/Cargo.toml leptos-website/Cargo.lock ./

# Build dependencies based on manifests (Layer 4 - uses Layer 3 cache)
# Create a dummy project to trigger dependency compilation without needing full source code
RUN mkdir src && echo "fn main() { panic!(\"Dummy main shouldn't be run\"); }" > src/main.rs
# Attempt to build the binary; this primarily builds dependencies.
# We pipe to true or || true to ignore errors if the dummy main doesn't perfectly match the project structure,
# as the goal is just to compile dependencies based on Cargo.lock.
# The actual final build command later will ensure correctness.
RUN cargo build --release --bin leptos_website || true
RUN rm -rf src # Clean up dummy source

# Copy the rest of the application code (Layer 5 - cache invalidated if app code changes)
# This now happens *after* dependencies are built and cached.
COPY leptos-website .

# Build the actual application (Layer 6 - uses cached dependencies from Layer 4)
# This step should be much faster now as dependencies are likely cached.
RUN cargo leptos build --release

# --- Final Stage ---
FROM debian:bookworm-slim

# Copy the server binary to the /app directory
COPY --from=builder /app/leptos-website/target/release/leptos_website /app/
# /target/site contains our JS/WASM/CSS, etc.
COPY --from=builder /app/leptos-website/target/site /app/site
# Copy Cargo.toml if it's needed at runtime
COPY --from=builder /app/leptos-website/Cargo.toml /app/
WORKDIR /app
ENV RUST_LOG="info"
ENV LEPTOS_SITE_ADDR="0.0.0.0:8080"
ENV LEPTOS_SITE_ROOT="site"
EXPOSE 8080

CMD ["/app/leptos_website"]