<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Videocall Engineering - Gstreamer</title>
    <subtitle>Videocall Engineering</subtitle>
    <link rel="self" type="application/atom+xml" href="https://engineering.videocall.rs/tags/gstreamer/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://engineering.videocall.rs"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-04-09T00:00:00+00:00</updated>
    <id>https://engineering.videocall.rs/tags/gstreamer/atom.xml</id>
    <entry xml:lang="en">
        <title>Bundling &amp; Notarization GStreamer with Tauri Apps on macOS: A Developer&#x27;s Guide</title>
        <published>2025-04-09T00:00:00+00:00</published>
        <updated>2025-04-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://engineering.videocall.rs/posts/taurigst/"/>
        <id>https://engineering.videocall.rs/posts/taurigst/</id>
        
        <content type="html" xml:base="https://engineering.videocall.rs/posts/taurigst/">&lt;p&gt;Working with multimedia in desktop applications often requires using GStreamer, a powerful multimedia framework. However, when building a macOS app with Tauri that uses GStreamer, developers face numerous challenges in bundling, signing, and notarizing the application correctly.&lt;&#x2F;p&gt;
&lt;p&gt;After some troubleshooting and experimentation, I&#x27;ve successfully overcome these challenges. This guide shares key insights to help other developers avoid similar headaches.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;The Challenge&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Bundling GStreamer with a Tauri app on macOS involves several complex issues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;GStreamer&#x27;s architecture&lt;&#x2F;strong&gt; consists of numerous interdependent dynamic libraries that must be correctly bundled and linked&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Apple&#x27;s notarization requirements&lt;&#x2F;strong&gt; conflict with GStreamer&#x27;s recommended configurations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Path references&lt;&#x2F;strong&gt; in dynamic libraries must be properly relocated&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Code signing&lt;&#x2F;strong&gt; must be applied correctly to each individual binary&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Tauri&#x27;s bundling system&lt;&#x2F;strong&gt; must be properly configured to include GStreamer&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;1-bundling-challenges&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt; 1. Bundling Challenges&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;GStreamer is complex because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It contains dozens of &lt;code&gt;.dylib&lt;&#x2F;code&gt; files that must be included in your app bundle&lt;&#x2F;li&gt;
&lt;li&gt;These libraries reference each other with absolute paths&lt;&#x2F;li&gt;
&lt;li&gt;They must be bundled for distribution to users who don&#x27;t have GStreamer installed&lt;&#x2F;li&gt;
&lt;li&gt;Missing even one dependency can cause cryptic runtime errors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-1-apple-s-signing-notarization-requirements&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt; 1.1 Apple&#x27;s Signing &amp;amp; Notarization Requirements&lt;&#x2F;span&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Apple&#x27;s requirements directly conflict with GStreamer&#x27;s documentation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hardened Runtime&lt;&#x2F;strong&gt;: Apple requires enabling the hardened runtime for notarization, while GStreamer documentation suggests disabling it&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Individual Signing&lt;&#x2F;strong&gt;: Each &lt;code&gt;.dylib&lt;&#x2F;code&gt; must be signed separately with a valid Developer ID&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Secure Timestamps&lt;&#x2F;strong&gt;: All signatures must include a secure timestamp&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Special Entitlements&lt;&#x2F;strong&gt;: GStreamer requires specific entitlements to function with hardened runtime enabled:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.apple.security.cs.allow-unsigned-executable-memory&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;com.apple.security.cs.disable-library-validation&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;com.apple.security.cs.allow-dyld-environment-variables&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-2-path-handling-solutions&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt; 1.2 Path Handling Solutions&lt;&#x2F;span&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Getting the library paths right is critical:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;install_name_tool&lt;&#x2F;code&gt; to modify library references to use &lt;code&gt;@executable_path&lt;&#x2F;code&gt; instead of absolute paths&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;@rpath&lt;&#x2F;code&gt; references to the executable&lt;&#x2F;li&gt;
&lt;li&gt;Set environment variables in a wrapper script and &lt;code&gt;Info.plist&lt;&#x2F;code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GST_PLUGIN_SYSTEM_PATH&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GST_PLUGIN_PATH&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DYLD_LIBRARY_PATH&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-3-tauri-integration&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;1.3 Tauri Integration&lt;&#x2F;span&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Integrating with Tauri requires special attention:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Configure Tauri&#x27;s resources system to include GStreamer libraries&lt;&#x2F;li&gt;
&lt;li&gt;Modify &lt;code&gt;build.rs&lt;&#x2F;code&gt; to add the correct rpath&lt;&#x2F;li&gt;
&lt;li&gt;Avoid interfering with Tauri&#x27;s DMG creation process&lt;&#x2F;li&gt;
&lt;li&gt;Use a wrapper script for your main executable to set environment variables&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;Conclusion&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Successfully bundling GStreamer with a Tauri app on macOS requires navigating the complex interplay between GStreamer&#x27;s architecture, Apple&#x27;s notarization requirements, and Tauri&#x27;s bundling system.&lt;&#x2F;p&gt;
&lt;p&gt;The key is to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ALWAYS use custom build scripts to handle library paths, do not rely tauri.conf file manually but edit the tauri file WITH your build script.&lt;&#x2F;li&gt;
&lt;li&gt;Sign each library individually&lt;&#x2F;li&gt;
&lt;li&gt;Use appropriate entitlements&lt;&#x2F;li&gt;
&lt;li&gt;Fix all library paths using &lt;code&gt;install_name_tool&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Ensure required environment variables are set&lt;&#x2F;li&gt;
&lt;li&gt;Verify all required libraries are included&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With this approach, you can create properly signed, notarized macOS apps that include GStreamer libraries and will work perfectly on customer systems without requiring a separate GStreamer installation.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
