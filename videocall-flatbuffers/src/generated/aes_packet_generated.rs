// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod videocall {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod protocol {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum AesPacketOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AesPacket<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AesPacket<'a> {
  type Inner = AesPacket<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> AesPacket<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_IV: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AesPacket { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AesPacketArgs<'args>
  ) -> flatbuffers::WIPOffset<AesPacket<'bldr>> {
    let mut builder = AesPacketBuilder::new(_fbb);
    if let Some(x) = args.iv { builder.add_iv(x); }
    if let Some(x) = args.key { builder.add_key(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> AesPacketT {
    let key = self.key().map(|x| {
      x.to_vec()
    });
    let iv = self.iv().map(|x| {
      x.to_vec()
    });
    AesPacketT {
      key,
      iv,
    }
  }

  #[inline]
  pub fn key(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AesPacket::VT_KEY, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn iv(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AesPacket::VT_IV, None).map(|v| v.safe_slice())
  }
}

impl flatbuffers::Verifiable for AesPacket<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("iv", Self::VT_IV, false)?
     .finish();
    Ok(())
  }
}
pub struct AesPacketArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub iv: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for AesPacketArgs<'a> {
  #[inline]
  fn default() -> Self {
    AesPacketArgs {
      key: None,
      iv: None,
    }
  }
}

pub struct AesPacketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AesPacketBuilder<'a, 'b> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AesPacket::VT_KEY, key);
  }
  #[inline]
  pub fn add_iv(&mut self, iv: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AesPacket::VT_IV, iv);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AesPacketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AesPacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AesPacket<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AesPacket<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AesPacket");
      ds.field("key", &self.key());
      ds.field("iv", &self.iv());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AesPacketT {
  pub key: Option<Vec<u8>>,
  pub iv: Option<Vec<u8>>,
}
impl Default for AesPacketT {
  fn default() -> Self {
    Self {
      key: None,
      iv: None,
    }
  }
}
impl AesPacketT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<AesPacket<'b>> {
    let key = self.key.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let iv = self.iv.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    AesPacket::create(_fbb, &AesPacketArgs{
      key,
      iv,
    })
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_aes_packet<'a>(buf: &'a [u8]) -> AesPacket<'a> {
  unsafe { flatbuffers::root_unchecked::<AesPacket<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_aes_packet<'a>(buf: &'a [u8]) -> AesPacket<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<AesPacket<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `AesPacket`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aes_packet_unchecked`.
pub fn root_as_aes_packet(buf: &[u8]) -> Result<AesPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AesPacket>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AesPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_aes_packet_unchecked`.
pub fn size_prefixed_root_as_aes_packet(buf: &[u8]) -> Result<AesPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AesPacket>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AesPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aes_packet_unchecked`.
pub fn root_as_aes_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AesPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AesPacket<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AesPacket` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aes_packet_unchecked`.
pub fn size_prefixed_root_as_aes_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AesPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AesPacket<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AesPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AesPacket`.
pub unsafe fn root_as_aes_packet_unchecked(buf: &[u8]) -> AesPacket {
  flatbuffers::root_unchecked::<AesPacket>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AesPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AesPacket`.
pub unsafe fn size_prefixed_root_as_aes_packet_unchecked(buf: &[u8]) -> AesPacket {
  flatbuffers::size_prefixed_root_unchecked::<AesPacket>(buf)
}
#[inline]
pub fn finish_aes_packet_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<AesPacket<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_aes_packet_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<AesPacket<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod protocol
}  // pub mod videocall

