// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod videocall {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod protocol {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_MEDIA_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_MEDIA_TYPE: i8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_MEDIA_TYPE: [MediaType; 5] = [
  MediaType::VIDEO,
  MediaType::AUDIO,
  MediaType::SCREEN,
  MediaType::HEARTBEAT,
  MediaType::RTT,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct MediaType(pub i8);
#[allow(non_upper_case_globals)]
impl MediaType {
  pub const VIDEO: Self = Self(0);
  pub const AUDIO: Self = Self(1);
  pub const SCREEN: Self = Self(2);
  pub const HEARTBEAT: Self = Self(3);
  pub const RTT: Self = Self(4);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::VIDEO,
    Self::AUDIO,
    Self::SCREEN,
    Self::HEARTBEAT,
    Self::RTT,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::VIDEO => Some("VIDEO"),
      Self::AUDIO => Some("AUDIO"),
      Self::SCREEN => Some("SCREEN"),
      Self::HEARTBEAT => Some("HEARTBEAT"),
      Self::RTT => Some("RTT"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for MediaType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for MediaType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<i8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for MediaType {
    type Output = MediaType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<i8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for MediaType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = i8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = i8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for MediaType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for MediaType {}
pub enum VideoMetricsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VideoMetrics<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VideoMetrics<'a> {
  type Inner = VideoMetrics<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> VideoMetrics<'a> {
  pub const VT_FPS_RECEIVED: flatbuffers::VOffsetT = 4;
  pub const VT_BITRATE_KBPS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VideoMetrics { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VideoMetricsArgs
  ) -> flatbuffers::WIPOffset<VideoMetrics<'bldr>> {
    let mut builder = VideoMetricsBuilder::new(_fbb);
    builder.add_bitrate_kbps(args.bitrate_kbps);
    builder.add_fps_received(args.fps_received);
    builder.finish()
  }

  pub fn unpack(&self) -> VideoMetricsT {
    let fps_received = self.fps_received();
    let bitrate_kbps = self.bitrate_kbps();
    VideoMetricsT {
      fps_received,
      bitrate_kbps,
    }
  }

  #[inline]
  pub fn fps_received(&self) -> f32 {
    self._tab.get::<f32>(VideoMetrics::VT_FPS_RECEIVED, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn bitrate_kbps(&self) -> u32 {
    self._tab.get::<u32>(VideoMetrics::VT_BITRATE_KBPS, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for VideoMetrics<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("fps_received", Self::VT_FPS_RECEIVED, false)?
     .visit_field::<u32>("bitrate_kbps", Self::VT_BITRATE_KBPS, false)?
     .finish();
    Ok(())
  }
}
pub struct VideoMetricsArgs {
    pub fps_received: f32,
    pub bitrate_kbps: u32,
}
impl<'a> Default for VideoMetricsArgs {
  #[inline]
  fn default() -> Self {
    VideoMetricsArgs {
      fps_received: 0.0,
      bitrate_kbps: 0,
    }
  }
}

pub struct VideoMetricsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VideoMetricsBuilder<'a, 'b> {
  #[inline]
  pub fn add_fps_received(&mut self, fps_received: f32) {
    self.fbb_.push_slot::<f32>(VideoMetrics::VT_FPS_RECEIVED, fps_received, 0.0);
  }
  #[inline]
  pub fn add_bitrate_kbps(&mut self, bitrate_kbps: u32) {
    self.fbb_.push_slot::<u32>(VideoMetrics::VT_BITRATE_KBPS, bitrate_kbps, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VideoMetricsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VideoMetricsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VideoMetrics<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VideoMetrics<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VideoMetrics");
      ds.field("fps_received", &self.fps_received());
      ds.field("bitrate_kbps", &self.bitrate_kbps());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct VideoMetricsT {
  pub fps_received: f32,
  pub bitrate_kbps: u32,
}
impl Default for VideoMetricsT {
  fn default() -> Self {
    Self {
      fps_received: 0.0,
      bitrate_kbps: 0,
    }
  }
}
impl VideoMetricsT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<VideoMetrics<'b>> {
    let fps_received = self.fps_received;
    let bitrate_kbps = self.bitrate_kbps;
    VideoMetrics::create(_fbb, &VideoMetricsArgs{
      fps_received,
      bitrate_kbps,
    })
  }
}
pub enum AudioMetricsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AudioMetrics<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AudioMetrics<'a> {
  type Inner = AudioMetrics<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> AudioMetrics<'a> {
  pub const VT_FPS_RECEIVED: flatbuffers::VOffsetT = 4;
  pub const VT_BITRATE_KBPS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AudioMetrics { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AudioMetricsArgs
  ) -> flatbuffers::WIPOffset<AudioMetrics<'bldr>> {
    let mut builder = AudioMetricsBuilder::new(_fbb);
    builder.add_bitrate_kbps(args.bitrate_kbps);
    builder.add_fps_received(args.fps_received);
    builder.finish()
  }

  pub fn unpack(&self) -> AudioMetricsT {
    let fps_received = self.fps_received();
    let bitrate_kbps = self.bitrate_kbps();
    AudioMetricsT {
      fps_received,
      bitrate_kbps,
    }
  }

  #[inline]
  pub fn fps_received(&self) -> f32 {
    self._tab.get::<f32>(AudioMetrics::VT_FPS_RECEIVED, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn bitrate_kbps(&self) -> u32 {
    self._tab.get::<u32>(AudioMetrics::VT_BITRATE_KBPS, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for AudioMetrics<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("fps_received", Self::VT_FPS_RECEIVED, false)?
     .visit_field::<u32>("bitrate_kbps", Self::VT_BITRATE_KBPS, false)?
     .finish();
    Ok(())
  }
}
pub struct AudioMetricsArgs {
    pub fps_received: f32,
    pub bitrate_kbps: u32,
}
impl<'a> Default for AudioMetricsArgs {
  #[inline]
  fn default() -> Self {
    AudioMetricsArgs {
      fps_received: 0.0,
      bitrate_kbps: 0,
    }
  }
}

pub struct AudioMetricsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AudioMetricsBuilder<'a, 'b> {
  #[inline]
  pub fn add_fps_received(&mut self, fps_received: f32) {
    self.fbb_.push_slot::<f32>(AudioMetrics::VT_FPS_RECEIVED, fps_received, 0.0);
  }
  #[inline]
  pub fn add_bitrate_kbps(&mut self, bitrate_kbps: u32) {
    self.fbb_.push_slot::<u32>(AudioMetrics::VT_BITRATE_KBPS, bitrate_kbps, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AudioMetricsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AudioMetricsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AudioMetrics<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AudioMetrics<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AudioMetrics");
      ds.field("fps_received", &self.fps_received());
      ds.field("bitrate_kbps", &self.bitrate_kbps());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AudioMetricsT {
  pub fps_received: f32,
  pub bitrate_kbps: u32,
}
impl Default for AudioMetricsT {
  fn default() -> Self {
    Self {
      fps_received: 0.0,
      bitrate_kbps: 0,
    }
  }
}
impl AudioMetricsT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<AudioMetrics<'b>> {
    let fps_received = self.fps_received;
    let bitrate_kbps = self.bitrate_kbps;
    AudioMetrics::create(_fbb, &AudioMetricsArgs{
      fps_received,
      bitrate_kbps,
    })
  }
}
pub enum DiagnosticsPacketOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DiagnosticsPacket<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DiagnosticsPacket<'a> {
  type Inner = DiagnosticsPacket<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> DiagnosticsPacket<'a> {
  pub const VT_STREAM_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SENDER_ID: flatbuffers::VOffsetT = 6;
  pub const VT_TARGET_ID: flatbuffers::VOffsetT = 8;
  pub const VT_TIMESTAMP_MS: flatbuffers::VOffsetT = 10;
  pub const VT_MEDIA_TYPE: flatbuffers::VOffsetT = 12;
  pub const VT_VIDEO_METRICS: flatbuffers::VOffsetT = 14;
  pub const VT_AUDIO_METRICS: flatbuffers::VOffsetT = 16;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DiagnosticsPacket { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DiagnosticsPacketArgs<'args>
  ) -> flatbuffers::WIPOffset<DiagnosticsPacket<'bldr>> {
    let mut builder = DiagnosticsPacketBuilder::new(_fbb);
    builder.add_timestamp_ms(args.timestamp_ms);
    if let Some(x) = args.audio_metrics { builder.add_audio_metrics(x); }
    if let Some(x) = args.video_metrics { builder.add_video_metrics(x); }
    if let Some(x) = args.target_id { builder.add_target_id(x); }
    if let Some(x) = args.sender_id { builder.add_sender_id(x); }
    if let Some(x) = args.stream_id { builder.add_stream_id(x); }
    builder.add_media_type(args.media_type);
    builder.finish()
  }

  pub fn unpack(&self) -> DiagnosticsPacketT {
    let stream_id = self.stream_id().map(|x| {
      x.to_string()
    });
    let sender_id = self.sender_id().map(|x| {
      x.to_string()
    });
    let target_id = self.target_id().map(|x| {
      x.to_string()
    });
    let timestamp_ms = self.timestamp_ms();
    let media_type = self.media_type();
    let video_metrics = self.video_metrics().map(|x| {
      Box::new(x.unpack())
    });
    let audio_metrics = self.audio_metrics().map(|x| {
      Box::new(x.unpack())
    });
    DiagnosticsPacketT {
      stream_id,
      sender_id,
      target_id,
      timestamp_ms,
      media_type,
      video_metrics,
      audio_metrics,
    }
  }

  #[inline]
  pub fn stream_id(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiagnosticsPacket::VT_STREAM_ID, None)
  }
  #[inline]
  pub fn sender_id(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiagnosticsPacket::VT_SENDER_ID, None)
  }
  #[inline]
  pub fn target_id(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiagnosticsPacket::VT_TARGET_ID, None)
  }
  #[inline]
  pub fn timestamp_ms(&self) -> u64 {
    self._tab.get::<u64>(DiagnosticsPacket::VT_TIMESTAMP_MS, Some(0)).unwrap()
  }
  #[inline]
  pub fn media_type(&self) -> MediaType {
    self._tab.get::<MediaType>(DiagnosticsPacket::VT_MEDIA_TYPE, Some(MediaType::VIDEO)).unwrap()
  }
  #[inline]
  pub fn video_metrics(&self) -> Option<VideoMetrics<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<VideoMetrics>>(DiagnosticsPacket::VT_VIDEO_METRICS, None)
  }
  #[inline]
  pub fn audio_metrics(&self) -> Option<AudioMetrics<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<AudioMetrics>>(DiagnosticsPacket::VT_AUDIO_METRICS, None)
  }
}

impl flatbuffers::Verifiable for DiagnosticsPacket<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("stream_id", Self::VT_STREAM_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sender_id", Self::VT_SENDER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("target_id", Self::VT_TARGET_ID, false)?
     .visit_field::<u64>("timestamp_ms", Self::VT_TIMESTAMP_MS, false)?
     .visit_field::<MediaType>("media_type", Self::VT_MEDIA_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<VideoMetrics>>("video_metrics", Self::VT_VIDEO_METRICS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<AudioMetrics>>("audio_metrics", Self::VT_AUDIO_METRICS, false)?
     .finish();
    Ok(())
  }
}
pub struct DiagnosticsPacketArgs<'a> {
    pub stream_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sender_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub target_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timestamp_ms: u64,
    pub media_type: MediaType,
    pub video_metrics: Option<flatbuffers::WIPOffset<VideoMetrics<'a>>>,
    pub audio_metrics: Option<flatbuffers::WIPOffset<AudioMetrics<'a>>>,
}
impl<'a> Default for DiagnosticsPacketArgs<'a> {
  #[inline]
  fn default() -> Self {
    DiagnosticsPacketArgs {
      stream_id: None,
      sender_id: None,
      target_id: None,
      timestamp_ms: 0,
      media_type: MediaType::VIDEO,
      video_metrics: None,
      audio_metrics: None,
    }
  }
}

pub struct DiagnosticsPacketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DiagnosticsPacketBuilder<'a, 'b> {
  #[inline]
  pub fn add_stream_id(&mut self, stream_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiagnosticsPacket::VT_STREAM_ID, stream_id);
  }
  #[inline]
  pub fn add_sender_id(&mut self, sender_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiagnosticsPacket::VT_SENDER_ID, sender_id);
  }
  #[inline]
  pub fn add_target_id(&mut self, target_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiagnosticsPacket::VT_TARGET_ID, target_id);
  }
  #[inline]
  pub fn add_timestamp_ms(&mut self, timestamp_ms: u64) {
    self.fbb_.push_slot::<u64>(DiagnosticsPacket::VT_TIMESTAMP_MS, timestamp_ms, 0);
  }
  #[inline]
  pub fn add_media_type(&mut self, media_type: MediaType) {
    self.fbb_.push_slot::<MediaType>(DiagnosticsPacket::VT_MEDIA_TYPE, media_type, MediaType::VIDEO);
  }
  #[inline]
  pub fn add_video_metrics(&mut self, video_metrics: flatbuffers::WIPOffset<VideoMetrics<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VideoMetrics>>(DiagnosticsPacket::VT_VIDEO_METRICS, video_metrics);
  }
  #[inline]
  pub fn add_audio_metrics(&mut self, audio_metrics: flatbuffers::WIPOffset<AudioMetrics<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<AudioMetrics>>(DiagnosticsPacket::VT_AUDIO_METRICS, audio_metrics);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DiagnosticsPacketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DiagnosticsPacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DiagnosticsPacket<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DiagnosticsPacket<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DiagnosticsPacket");
      ds.field("stream_id", &self.stream_id());
      ds.field("sender_id", &self.sender_id());
      ds.field("target_id", &self.target_id());
      ds.field("timestamp_ms", &self.timestamp_ms());
      ds.field("media_type", &self.media_type());
      ds.field("video_metrics", &self.video_metrics());
      ds.field("audio_metrics", &self.audio_metrics());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DiagnosticsPacketT {
  pub stream_id: Option<String>,
  pub sender_id: Option<String>,
  pub target_id: Option<String>,
  pub timestamp_ms: u64,
  pub media_type: MediaType,
  pub video_metrics: Option<Box<VideoMetricsT>>,
  pub audio_metrics: Option<Box<AudioMetricsT>>,
}
impl Default for DiagnosticsPacketT {
  fn default() -> Self {
    Self {
      stream_id: None,
      sender_id: None,
      target_id: None,
      timestamp_ms: 0,
      media_type: MediaType::VIDEO,
      video_metrics: None,
      audio_metrics: None,
    }
  }
}
impl DiagnosticsPacketT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<DiagnosticsPacket<'b>> {
    let stream_id = self.stream_id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sender_id = self.sender_id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let target_id = self.target_id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let timestamp_ms = self.timestamp_ms;
    let media_type = self.media_type;
    let video_metrics = self.video_metrics.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let audio_metrics = self.audio_metrics.as_ref().map(|x|{
      x.pack(_fbb)
    });
    DiagnosticsPacket::create(_fbb, &DiagnosticsPacketArgs{
      stream_id,
      sender_id,
      target_id,
      timestamp_ms,
      media_type,
      video_metrics,
      audio_metrics,
    })
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_diagnostics_packet<'a>(buf: &'a [u8]) -> DiagnosticsPacket<'a> {
  unsafe { flatbuffers::root_unchecked::<DiagnosticsPacket<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_diagnostics_packet<'a>(buf: &'a [u8]) -> DiagnosticsPacket<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<DiagnosticsPacket<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `DiagnosticsPacket`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diagnostics_packet_unchecked`.
pub fn root_as_diagnostics_packet(buf: &[u8]) -> Result<DiagnosticsPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DiagnosticsPacket>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DiagnosticsPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_diagnostics_packet_unchecked`.
pub fn size_prefixed_root_as_diagnostics_packet(buf: &[u8]) -> Result<DiagnosticsPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DiagnosticsPacket>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DiagnosticsPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diagnostics_packet_unchecked`.
pub fn root_as_diagnostics_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DiagnosticsPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DiagnosticsPacket<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DiagnosticsPacket` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diagnostics_packet_unchecked`.
pub fn size_prefixed_root_as_diagnostics_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DiagnosticsPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DiagnosticsPacket<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DiagnosticsPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DiagnosticsPacket`.
pub unsafe fn root_as_diagnostics_packet_unchecked(buf: &[u8]) -> DiagnosticsPacket {
  flatbuffers::root_unchecked::<DiagnosticsPacket>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DiagnosticsPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DiagnosticsPacket`.
pub unsafe fn size_prefixed_root_as_diagnostics_packet_unchecked(buf: &[u8]) -> DiagnosticsPacket {
  flatbuffers::size_prefixed_root_unchecked::<DiagnosticsPacket>(buf)
}
#[inline]
pub fn finish_diagnostics_packet_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<DiagnosticsPacket<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_diagnostics_packet_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<DiagnosticsPacket<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod protocol
}  // pub mod videocall

