// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod videocall {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod protocol {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_MEDIA_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_MEDIA_TYPE: i8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_MEDIA_TYPE: [MediaType; 5] = [
  MediaType::VIDEO,
  MediaType::AUDIO,
  MediaType::SCREEN,
  MediaType::HEARTBEAT,
  MediaType::RTT,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct MediaType(pub i8);
#[allow(non_upper_case_globals)]
impl MediaType {
  pub const VIDEO: Self = Self(0);
  pub const AUDIO: Self = Self(1);
  pub const SCREEN: Self = Self(2);
  pub const HEARTBEAT: Self = Self(3);
  pub const RTT: Self = Self(4);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::VIDEO,
    Self::AUDIO,
    Self::SCREEN,
    Self::HEARTBEAT,
    Self::RTT,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::VIDEO => Some("VIDEO"),
      Self::AUDIO => Some("AUDIO"),
      Self::SCREEN => Some("SCREEN"),
      Self::HEARTBEAT => Some("HEARTBEAT"),
      Self::RTT => Some("RTT"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for MediaType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for MediaType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<i8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for MediaType {
    type Output = MediaType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<i8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for MediaType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = i8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = i8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for MediaType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for MediaType {}
pub enum AudioMetadataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AudioMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AudioMetadata<'a> {
  type Inner = AudioMetadata<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> AudioMetadata<'a> {
  pub const VT_AUDIO_FORMAT: flatbuffers::VOffsetT = 4;
  pub const VT_AUDIO_NUMBER_OF_CHANNELS: flatbuffers::VOffsetT = 6;
  pub const VT_AUDIO_NUMBER_OF_FRAMES: flatbuffers::VOffsetT = 8;
  pub const VT_AUDIO_SAMPLE_RATE: flatbuffers::VOffsetT = 10;
  pub const VT_SEQUENCE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AudioMetadata { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AudioMetadataArgs<'args>
  ) -> flatbuffers::WIPOffset<AudioMetadata<'bldr>> {
    let mut builder = AudioMetadataBuilder::new(_fbb);
    builder.add_sequence(args.sequence);
    builder.add_audio_sample_rate(args.audio_sample_rate);
    builder.add_audio_number_of_frames(args.audio_number_of_frames);
    builder.add_audio_number_of_channels(args.audio_number_of_channels);
    if let Some(x) = args.audio_format { builder.add_audio_format(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> AudioMetadataT {
    let audio_format = self.audio_format().map(|x| {
      x.to_string()
    });
    let audio_number_of_channels = self.audio_number_of_channels();
    let audio_number_of_frames = self.audio_number_of_frames();
    let audio_sample_rate = self.audio_sample_rate();
    let sequence = self.sequence();
    AudioMetadataT {
      audio_format,
      audio_number_of_channels,
      audio_number_of_frames,
      audio_sample_rate,
      sequence,
    }
  }

  #[inline]
  pub fn audio_format(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AudioMetadata::VT_AUDIO_FORMAT, None)
  }
  #[inline]
  pub fn audio_number_of_channels(&self) -> u32 {
    self._tab.get::<u32>(AudioMetadata::VT_AUDIO_NUMBER_OF_CHANNELS, Some(0)).unwrap()
  }
  #[inline]
  pub fn audio_number_of_frames(&self) -> u32 {
    self._tab.get::<u32>(AudioMetadata::VT_AUDIO_NUMBER_OF_FRAMES, Some(0)).unwrap()
  }
  #[inline]
  pub fn audio_sample_rate(&self) -> f32 {
    self._tab.get::<f32>(AudioMetadata::VT_AUDIO_SAMPLE_RATE, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn sequence(&self) -> u64 {
    self._tab.get::<u64>(AudioMetadata::VT_SEQUENCE, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for AudioMetadata<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("audio_format", Self::VT_AUDIO_FORMAT, false)?
     .visit_field::<u32>("audio_number_of_channels", Self::VT_AUDIO_NUMBER_OF_CHANNELS, false)?
     .visit_field::<u32>("audio_number_of_frames", Self::VT_AUDIO_NUMBER_OF_FRAMES, false)?
     .visit_field::<f32>("audio_sample_rate", Self::VT_AUDIO_SAMPLE_RATE, false)?
     .visit_field::<u64>("sequence", Self::VT_SEQUENCE, false)?
     .finish();
    Ok(())
  }
}
pub struct AudioMetadataArgs<'a> {
    pub audio_format: Option<flatbuffers::WIPOffset<&'a str>>,
    pub audio_number_of_channels: u32,
    pub audio_number_of_frames: u32,
    pub audio_sample_rate: f32,
    pub sequence: u64,
}
impl<'a> Default for AudioMetadataArgs<'a> {
  #[inline]
  fn default() -> Self {
    AudioMetadataArgs {
      audio_format: None,
      audio_number_of_channels: 0,
      audio_number_of_frames: 0,
      audio_sample_rate: 0.0,
      sequence: 0,
    }
  }
}

pub struct AudioMetadataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AudioMetadataBuilder<'a, 'b> {
  #[inline]
  pub fn add_audio_format(&mut self, audio_format: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AudioMetadata::VT_AUDIO_FORMAT, audio_format);
  }
  #[inline]
  pub fn add_audio_number_of_channels(&mut self, audio_number_of_channels: u32) {
    self.fbb_.push_slot::<u32>(AudioMetadata::VT_AUDIO_NUMBER_OF_CHANNELS, audio_number_of_channels, 0);
  }
  #[inline]
  pub fn add_audio_number_of_frames(&mut self, audio_number_of_frames: u32) {
    self.fbb_.push_slot::<u32>(AudioMetadata::VT_AUDIO_NUMBER_OF_FRAMES, audio_number_of_frames, 0);
  }
  #[inline]
  pub fn add_audio_sample_rate(&mut self, audio_sample_rate: f32) {
    self.fbb_.push_slot::<f32>(AudioMetadata::VT_AUDIO_SAMPLE_RATE, audio_sample_rate, 0.0);
  }
  #[inline]
  pub fn add_sequence(&mut self, sequence: u64) {
    self.fbb_.push_slot::<u64>(AudioMetadata::VT_SEQUENCE, sequence, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AudioMetadataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AudioMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AudioMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AudioMetadata<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AudioMetadata");
      ds.field("audio_format", &self.audio_format());
      ds.field("audio_number_of_channels", &self.audio_number_of_channels());
      ds.field("audio_number_of_frames", &self.audio_number_of_frames());
      ds.field("audio_sample_rate", &self.audio_sample_rate());
      ds.field("sequence", &self.sequence());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AudioMetadataT {
  pub audio_format: Option<String>,
  pub audio_number_of_channels: u32,
  pub audio_number_of_frames: u32,
  pub audio_sample_rate: f32,
  pub sequence: u64,
}
impl Default for AudioMetadataT {
  fn default() -> Self {
    Self {
      audio_format: None,
      audio_number_of_channels: 0,
      audio_number_of_frames: 0,
      audio_sample_rate: 0.0,
      sequence: 0,
    }
  }
}
impl AudioMetadataT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<AudioMetadata<'b>> {
    let audio_format = self.audio_format.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let audio_number_of_channels = self.audio_number_of_channels;
    let audio_number_of_frames = self.audio_number_of_frames;
    let audio_sample_rate = self.audio_sample_rate;
    let sequence = self.sequence;
    AudioMetadata::create(_fbb, &AudioMetadataArgs{
      audio_format,
      audio_number_of_channels,
      audio_number_of_frames,
      audio_sample_rate,
      sequence,
    })
  }
}
pub enum VideoMetadataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VideoMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VideoMetadata<'a> {
  type Inner = VideoMetadata<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> VideoMetadata<'a> {
  pub const VT_SEQUENCE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VideoMetadata { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VideoMetadataArgs
  ) -> flatbuffers::WIPOffset<VideoMetadata<'bldr>> {
    let mut builder = VideoMetadataBuilder::new(_fbb);
    builder.add_sequence(args.sequence);
    builder.finish()
  }

  pub fn unpack(&self) -> VideoMetadataT {
    let sequence = self.sequence();
    VideoMetadataT {
      sequence,
    }
  }

  #[inline]
  pub fn sequence(&self) -> u64 {
    self._tab.get::<u64>(VideoMetadata::VT_SEQUENCE, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for VideoMetadata<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("sequence", Self::VT_SEQUENCE, false)?
     .finish();
    Ok(())
  }
}
pub struct VideoMetadataArgs {
    pub sequence: u64,
}
impl<'a> Default for VideoMetadataArgs {
  #[inline]
  fn default() -> Self {
    VideoMetadataArgs {
      sequence: 0,
    }
  }
}

pub struct VideoMetadataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VideoMetadataBuilder<'a, 'b> {
  #[inline]
  pub fn add_sequence(&mut self, sequence: u64) {
    self.fbb_.push_slot::<u64>(VideoMetadata::VT_SEQUENCE, sequence, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VideoMetadataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VideoMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VideoMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VideoMetadata<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VideoMetadata");
      ds.field("sequence", &self.sequence());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct VideoMetadataT {
  pub sequence: u64,
}
impl Default for VideoMetadataT {
  fn default() -> Self {
    Self {
      sequence: 0,
    }
  }
}
impl VideoMetadataT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<VideoMetadata<'b>> {
    let sequence = self.sequence;
    VideoMetadata::create(_fbb, &VideoMetadataArgs{
      sequence,
    })
  }
}
pub enum HeartbeatMetadataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct HeartbeatMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HeartbeatMetadata<'a> {
  type Inner = HeartbeatMetadata<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> HeartbeatMetadata<'a> {
  pub const VT_VIDEO_ENABLED: flatbuffers::VOffsetT = 4;
  pub const VT_AUDIO_ENABLED: flatbuffers::VOffsetT = 6;
  pub const VT_SCREEN_ENABLED: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    HeartbeatMetadata { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args HeartbeatMetadataArgs
  ) -> flatbuffers::WIPOffset<HeartbeatMetadata<'bldr>> {
    let mut builder = HeartbeatMetadataBuilder::new(_fbb);
    builder.add_screen_enabled(args.screen_enabled);
    builder.add_audio_enabled(args.audio_enabled);
    builder.add_video_enabled(args.video_enabled);
    builder.finish()
  }

  pub fn unpack(&self) -> HeartbeatMetadataT {
    let video_enabled = self.video_enabled();
    let audio_enabled = self.audio_enabled();
    let screen_enabled = self.screen_enabled();
    HeartbeatMetadataT {
      video_enabled,
      audio_enabled,
      screen_enabled,
    }
  }

  #[inline]
  pub fn video_enabled(&self) -> bool {
    self._tab.get::<bool>(HeartbeatMetadata::VT_VIDEO_ENABLED, Some(false)).unwrap()
  }
  #[inline]
  pub fn audio_enabled(&self) -> bool {
    self._tab.get::<bool>(HeartbeatMetadata::VT_AUDIO_ENABLED, Some(false)).unwrap()
  }
  #[inline]
  pub fn screen_enabled(&self) -> bool {
    self._tab.get::<bool>(HeartbeatMetadata::VT_SCREEN_ENABLED, Some(false)).unwrap()
  }
}

impl flatbuffers::Verifiable for HeartbeatMetadata<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("video_enabled", Self::VT_VIDEO_ENABLED, false)?
     .visit_field::<bool>("audio_enabled", Self::VT_AUDIO_ENABLED, false)?
     .visit_field::<bool>("screen_enabled", Self::VT_SCREEN_ENABLED, false)?
     .finish();
    Ok(())
  }
}
pub struct HeartbeatMetadataArgs {
    pub video_enabled: bool,
    pub audio_enabled: bool,
    pub screen_enabled: bool,
}
impl<'a> Default for HeartbeatMetadataArgs {
  #[inline]
  fn default() -> Self {
    HeartbeatMetadataArgs {
      video_enabled: false,
      audio_enabled: false,
      screen_enabled: false,
    }
  }
}

pub struct HeartbeatMetadataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HeartbeatMetadataBuilder<'a, 'b> {
  #[inline]
  pub fn add_video_enabled(&mut self, video_enabled: bool) {
    self.fbb_.push_slot::<bool>(HeartbeatMetadata::VT_VIDEO_ENABLED, video_enabled, false);
  }
  #[inline]
  pub fn add_audio_enabled(&mut self, audio_enabled: bool) {
    self.fbb_.push_slot::<bool>(HeartbeatMetadata::VT_AUDIO_ENABLED, audio_enabled, false);
  }
  #[inline]
  pub fn add_screen_enabled(&mut self, screen_enabled: bool) {
    self.fbb_.push_slot::<bool>(HeartbeatMetadata::VT_SCREEN_ENABLED, screen_enabled, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HeartbeatMetadataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HeartbeatMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HeartbeatMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for HeartbeatMetadata<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("HeartbeatMetadata");
      ds.field("video_enabled", &self.video_enabled());
      ds.field("audio_enabled", &self.audio_enabled());
      ds.field("screen_enabled", &self.screen_enabled());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct HeartbeatMetadataT {
  pub video_enabled: bool,
  pub audio_enabled: bool,
  pub screen_enabled: bool,
}
impl Default for HeartbeatMetadataT {
  fn default() -> Self {
    Self {
      video_enabled: false,
      audio_enabled: false,
      screen_enabled: false,
    }
  }
}
impl HeartbeatMetadataT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<HeartbeatMetadata<'b>> {
    let video_enabled = self.video_enabled;
    let audio_enabled = self.audio_enabled;
    let screen_enabled = self.screen_enabled;
    HeartbeatMetadata::create(_fbb, &HeartbeatMetadataArgs{
      video_enabled,
      audio_enabled,
      screen_enabled,
    })
  }
}
pub enum MediaPacketOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MediaPacket<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MediaPacket<'a> {
  type Inner = MediaPacket<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> MediaPacket<'a> {
  pub const VT_MEDIA_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_EMAIL: flatbuffers::VOffsetT = 6;
  pub const VT_DATA: flatbuffers::VOffsetT = 8;
  pub const VT_FRAME_TYPE: flatbuffers::VOffsetT = 10;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 12;
  pub const VT_DURATION: flatbuffers::VOffsetT = 14;
  pub const VT_AUDIO_METADATA: flatbuffers::VOffsetT = 16;
  pub const VT_VIDEO_METADATA: flatbuffers::VOffsetT = 18;
  pub const VT_HEARTBEAT_METADATA: flatbuffers::VOffsetT = 20;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MediaPacket { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args MediaPacketArgs<'args>
  ) -> flatbuffers::WIPOffset<MediaPacket<'bldr>> {
    let mut builder = MediaPacketBuilder::new(_fbb);
    builder.add_duration(args.duration);
    builder.add_timestamp(args.timestamp);
    if let Some(x) = args.heartbeat_metadata { builder.add_heartbeat_metadata(x); }
    if let Some(x) = args.video_metadata { builder.add_video_metadata(x); }
    if let Some(x) = args.audio_metadata { builder.add_audio_metadata(x); }
    if let Some(x) = args.frame_type { builder.add_frame_type(x); }
    if let Some(x) = args.data { builder.add_data(x); }
    if let Some(x) = args.email { builder.add_email(x); }
    builder.add_media_type(args.media_type);
    builder.finish()
  }

  pub fn unpack(&self) -> MediaPacketT {
    let media_type = self.media_type();
    let email = self.email().map(|x| {
      x.to_string()
    });
    let data = self.data().map(|x| {
      x.to_vec()
    });
    let frame_type = self.frame_type().map(|x| {
      x.to_string()
    });
    let timestamp = self.timestamp();
    let duration = self.duration();
    let audio_metadata = self.audio_metadata().map(|x| {
      Box::new(x.unpack())
    });
    let video_metadata = self.video_metadata().map(|x| {
      Box::new(x.unpack())
    });
    let heartbeat_metadata = self.heartbeat_metadata().map(|x| {
      Box::new(x.unpack())
    });
    MediaPacketT {
      media_type,
      email,
      data,
      frame_type,
      timestamp,
      duration,
      audio_metadata,
      video_metadata,
      heartbeat_metadata,
    }
  }

  #[inline]
  pub fn media_type(&self) -> MediaType {
    self._tab.get::<MediaType>(MediaPacket::VT_MEDIA_TYPE, Some(MediaType::VIDEO)).unwrap()
  }
  #[inline]
  pub fn email(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MediaPacket::VT_EMAIL, None)
  }
  #[inline]
  pub fn data(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(MediaPacket::VT_DATA, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn frame_type(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MediaPacket::VT_FRAME_TYPE, None)
  }
  #[inline]
  pub fn timestamp(&self) -> f64 {
    self._tab.get::<f64>(MediaPacket::VT_TIMESTAMP, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn duration(&self) -> f64 {
    self._tab.get::<f64>(MediaPacket::VT_DURATION, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn audio_metadata(&self) -> Option<AudioMetadata<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<AudioMetadata>>(MediaPacket::VT_AUDIO_METADATA, None)
  }
  #[inline]
  pub fn video_metadata(&self) -> Option<VideoMetadata<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<VideoMetadata>>(MediaPacket::VT_VIDEO_METADATA, None)
  }
  #[inline]
  pub fn heartbeat_metadata(&self) -> Option<HeartbeatMetadata<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<HeartbeatMetadata>>(MediaPacket::VT_HEARTBEAT_METADATA, None)
  }
}

impl flatbuffers::Verifiable for MediaPacket<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<MediaType>("media_type", Self::VT_MEDIA_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("email", Self::VT_EMAIL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("data", Self::VT_DATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("frame_type", Self::VT_FRAME_TYPE, false)?
     .visit_field::<f64>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<f64>("duration", Self::VT_DURATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<AudioMetadata>>("audio_metadata", Self::VT_AUDIO_METADATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<VideoMetadata>>("video_metadata", Self::VT_VIDEO_METADATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<HeartbeatMetadata>>("heartbeat_metadata", Self::VT_HEARTBEAT_METADATA, false)?
     .finish();
    Ok(())
  }
}
pub struct MediaPacketArgs<'a> {
    pub media_type: MediaType,
    pub email: Option<flatbuffers::WIPOffset<&'a str>>,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub frame_type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timestamp: f64,
    pub duration: f64,
    pub audio_metadata: Option<flatbuffers::WIPOffset<AudioMetadata<'a>>>,
    pub video_metadata: Option<flatbuffers::WIPOffset<VideoMetadata<'a>>>,
    pub heartbeat_metadata: Option<flatbuffers::WIPOffset<HeartbeatMetadata<'a>>>,
}
impl<'a> Default for MediaPacketArgs<'a> {
  #[inline]
  fn default() -> Self {
    MediaPacketArgs {
      media_type: MediaType::VIDEO,
      email: None,
      data: None,
      frame_type: None,
      timestamp: 0.0,
      duration: 0.0,
      audio_metadata: None,
      video_metadata: None,
      heartbeat_metadata: None,
    }
  }
}

pub struct MediaPacketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MediaPacketBuilder<'a, 'b> {
  #[inline]
  pub fn add_media_type(&mut self, media_type: MediaType) {
    self.fbb_.push_slot::<MediaType>(MediaPacket::VT_MEDIA_TYPE, media_type, MediaType::VIDEO);
  }
  #[inline]
  pub fn add_email(&mut self, email: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MediaPacket::VT_EMAIL, email);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MediaPacket::VT_DATA, data);
  }
  #[inline]
  pub fn add_frame_type(&mut self, frame_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MediaPacket::VT_FRAME_TYPE, frame_type);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: f64) {
    self.fbb_.push_slot::<f64>(MediaPacket::VT_TIMESTAMP, timestamp, 0.0);
  }
  #[inline]
  pub fn add_duration(&mut self, duration: f64) {
    self.fbb_.push_slot::<f64>(MediaPacket::VT_DURATION, duration, 0.0);
  }
  #[inline]
  pub fn add_audio_metadata(&mut self, audio_metadata: flatbuffers::WIPOffset<AudioMetadata<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<AudioMetadata>>(MediaPacket::VT_AUDIO_METADATA, audio_metadata);
  }
  #[inline]
  pub fn add_video_metadata(&mut self, video_metadata: flatbuffers::WIPOffset<VideoMetadata<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VideoMetadata>>(MediaPacket::VT_VIDEO_METADATA, video_metadata);
  }
  #[inline]
  pub fn add_heartbeat_metadata(&mut self, heartbeat_metadata: flatbuffers::WIPOffset<HeartbeatMetadata<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<HeartbeatMetadata>>(MediaPacket::VT_HEARTBEAT_METADATA, heartbeat_metadata);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MediaPacketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MediaPacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MediaPacket<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MediaPacket<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MediaPacket");
      ds.field("media_type", &self.media_type());
      ds.field("email", &self.email());
      ds.field("data", &self.data());
      ds.field("frame_type", &self.frame_type());
      ds.field("timestamp", &self.timestamp());
      ds.field("duration", &self.duration());
      ds.field("audio_metadata", &self.audio_metadata());
      ds.field("video_metadata", &self.video_metadata());
      ds.field("heartbeat_metadata", &self.heartbeat_metadata());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MediaPacketT {
  pub media_type: MediaType,
  pub email: Option<String>,
  pub data: Option<Vec<u8>>,
  pub frame_type: Option<String>,
  pub timestamp: f64,
  pub duration: f64,
  pub audio_metadata: Option<Box<AudioMetadataT>>,
  pub video_metadata: Option<Box<VideoMetadataT>>,
  pub heartbeat_metadata: Option<Box<HeartbeatMetadataT>>,
}
impl Default for MediaPacketT {
  fn default() -> Self {
    Self {
      media_type: MediaType::VIDEO,
      email: None,
      data: None,
      frame_type: None,
      timestamp: 0.0,
      duration: 0.0,
      audio_metadata: None,
      video_metadata: None,
      heartbeat_metadata: None,
    }
  }
}
impl MediaPacketT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<MediaPacket<'b>> {
    let media_type = self.media_type;
    let email = self.email.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let data = self.data.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let frame_type = self.frame_type.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let timestamp = self.timestamp;
    let duration = self.duration;
    let audio_metadata = self.audio_metadata.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let video_metadata = self.video_metadata.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let heartbeat_metadata = self.heartbeat_metadata.as_ref().map(|x|{
      x.pack(_fbb)
    });
    MediaPacket::create(_fbb, &MediaPacketArgs{
      media_type,
      email,
      data,
      frame_type,
      timestamp,
      duration,
      audio_metadata,
      video_metadata,
      heartbeat_metadata,
    })
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_media_packet<'a>(buf: &'a [u8]) -> MediaPacket<'a> {
  unsafe { flatbuffers::root_unchecked::<MediaPacket<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_media_packet<'a>(buf: &'a [u8]) -> MediaPacket<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<MediaPacket<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `MediaPacket`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_media_packet_unchecked`.
pub fn root_as_media_packet(buf: &[u8]) -> Result<MediaPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MediaPacket>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MediaPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_media_packet_unchecked`.
pub fn size_prefixed_root_as_media_packet(buf: &[u8]) -> Result<MediaPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MediaPacket>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MediaPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_media_packet_unchecked`.
pub fn root_as_media_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MediaPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MediaPacket<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MediaPacket` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_media_packet_unchecked`.
pub fn size_prefixed_root_as_media_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MediaPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MediaPacket<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MediaPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MediaPacket`.
pub unsafe fn root_as_media_packet_unchecked(buf: &[u8]) -> MediaPacket {
  flatbuffers::root_unchecked::<MediaPacket>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MediaPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MediaPacket`.
pub unsafe fn size_prefixed_root_as_media_packet_unchecked(buf: &[u8]) -> MediaPacket {
  flatbuffers::size_prefixed_root_unchecked::<MediaPacket>(buf)
}
#[inline]
pub fn finish_media_packet_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<MediaPacket<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_media_packet_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<MediaPacket<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod protocol
}  // pub mod videocall

