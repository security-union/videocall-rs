// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod videocall {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod protocol {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PACKET_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PACKET_TYPE: i8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PACKET_TYPE: [PacketType; 6] = [
  PacketType::RSA_PUB_KEY,
  PacketType::AES_KEY,
  PacketType::MEDIA,
  PacketType::CONNECTION,
  PacketType::DIAGNOSTICS,
  PacketType::HEALTH,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct PacketType(pub i8);
#[allow(non_upper_case_globals)]
impl PacketType {
  pub const RSA_PUB_KEY: Self = Self(0);
  pub const AES_KEY: Self = Self(1);
  pub const MEDIA: Self = Self(2);
  pub const CONNECTION: Self = Self(3);
  pub const DIAGNOSTICS: Self = Self(4);
  pub const HEALTH: Self = Self(5);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::RSA_PUB_KEY,
    Self::AES_KEY,
    Self::MEDIA,
    Self::CONNECTION,
    Self::DIAGNOSTICS,
    Self::HEALTH,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::RSA_PUB_KEY => Some("RSA_PUB_KEY"),
      Self::AES_KEY => Some("AES_KEY"),
      Self::MEDIA => Some("MEDIA"),
      Self::CONNECTION => Some("CONNECTION"),
      Self::DIAGNOSTICS => Some("DIAGNOSTICS"),
      Self::HEALTH => Some("HEALTH"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for PacketType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for PacketType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<i8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for PacketType {
    type Output = PacketType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<i8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for PacketType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = i8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = i8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for PacketType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PacketType {}
pub enum PacketWrapperOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PacketWrapper<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PacketWrapper<'a> {
  type Inner = PacketWrapper<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> PacketWrapper<'a> {
  pub const VT_PACKET_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_EMAIL: flatbuffers::VOffsetT = 6;
  pub const VT_DATA: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PacketWrapper { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PacketWrapperArgs<'args>
  ) -> flatbuffers::WIPOffset<PacketWrapper<'bldr>> {
    let mut builder = PacketWrapperBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    if let Some(x) = args.email { builder.add_email(x); }
    builder.add_packet_type(args.packet_type);
    builder.finish()
  }

  pub fn unpack(&self) -> PacketWrapperT {
    let packet_type = self.packet_type();
    let email = self.email().map(|x| {
      x.to_string()
    });
    let data = self.data().map(|x| {
      x.to_vec()
    });
    PacketWrapperT {
      packet_type,
      email,
      data,
    }
  }

  #[inline]
  pub fn packet_type(&self) -> PacketType {
    self._tab.get::<PacketType>(PacketWrapper::VT_PACKET_TYPE, Some(PacketType::RSA_PUB_KEY)).unwrap()
  }
  #[inline]
  pub fn email(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PacketWrapper::VT_EMAIL, None)
  }
  #[inline]
  pub fn data(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(PacketWrapper::VT_DATA, None).map(|v| v.safe_slice())
  }
}

impl flatbuffers::Verifiable for PacketWrapper<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<PacketType>("packet_type", Self::VT_PACKET_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("email", Self::VT_EMAIL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct PacketWrapperArgs<'a> {
    pub packet_type: PacketType,
    pub email: Option<flatbuffers::WIPOffset<&'a str>>,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for PacketWrapperArgs<'a> {
  #[inline]
  fn default() -> Self {
    PacketWrapperArgs {
      packet_type: PacketType::RSA_PUB_KEY,
      email: None,
      data: None,
    }
  }
}

pub struct PacketWrapperBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PacketWrapperBuilder<'a, 'b> {
  #[inline]
  pub fn add_packet_type(&mut self, packet_type: PacketType) {
    self.fbb_.push_slot::<PacketType>(PacketWrapper::VT_PACKET_TYPE, packet_type, PacketType::RSA_PUB_KEY);
  }
  #[inline]
  pub fn add_email(&mut self, email: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PacketWrapper::VT_EMAIL, email);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PacketWrapper::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PacketWrapperBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PacketWrapperBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PacketWrapper<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PacketWrapper<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PacketWrapper");
      ds.field("packet_type", &self.packet_type());
      ds.field("email", &self.email());
      ds.field("data", &self.data());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PacketWrapperT {
  pub packet_type: PacketType,
  pub email: Option<String>,
  pub data: Option<Vec<u8>>,
}
impl Default for PacketWrapperT {
  fn default() -> Self {
    Self {
      packet_type: PacketType::RSA_PUB_KEY,
      email: None,
      data: None,
    }
  }
}
impl PacketWrapperT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<PacketWrapper<'b>> {
    let packet_type = self.packet_type;
    let email = self.email.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let data = self.data.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    PacketWrapper::create(_fbb, &PacketWrapperArgs{
      packet_type,
      email,
      data,
    })
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_packet_wrapper<'a>(buf: &'a [u8]) -> PacketWrapper<'a> {
  unsafe { flatbuffers::root_unchecked::<PacketWrapper<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_packet_wrapper<'a>(buf: &'a [u8]) -> PacketWrapper<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<PacketWrapper<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `PacketWrapper`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_wrapper_unchecked`.
pub fn root_as_packet_wrapper(buf: &[u8]) -> Result<PacketWrapper, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PacketWrapper>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PacketWrapper` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_packet_wrapper_unchecked`.
pub fn size_prefixed_root_as_packet_wrapper(buf: &[u8]) -> Result<PacketWrapper, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PacketWrapper>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PacketWrapper` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_wrapper_unchecked`.
pub fn root_as_packet_wrapper_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PacketWrapper<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PacketWrapper<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PacketWrapper` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_wrapper_unchecked`.
pub fn size_prefixed_root_as_packet_wrapper_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PacketWrapper<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PacketWrapper<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PacketWrapper and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PacketWrapper`.
pub unsafe fn root_as_packet_wrapper_unchecked(buf: &[u8]) -> PacketWrapper {
  flatbuffers::root_unchecked::<PacketWrapper>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PacketWrapper and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PacketWrapper`.
pub unsafe fn size_prefixed_root_as_packet_wrapper_unchecked(buf: &[u8]) -> PacketWrapper {
  flatbuffers::size_prefixed_root_unchecked::<PacketWrapper>(buf)
}
#[inline]
pub fn finish_packet_wrapper_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<PacketWrapper<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_packet_wrapper_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<PacketWrapper<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod protocol
}  // pub mod videocall

