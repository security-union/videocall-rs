// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod videocall {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod protocol {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum RsaPacketOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RsaPacket<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RsaPacket<'a> {
  type Inner = RsaPacket<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> RsaPacket<'a> {
  pub const VT_PUBLIC_KEY_DER: flatbuffers::VOffsetT = 4;
  pub const VT_USERNAME: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RsaPacket { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args RsaPacketArgs<'args>
  ) -> flatbuffers::WIPOffset<RsaPacket<'bldr>> {
    let mut builder = RsaPacketBuilder::new(_fbb);
    if let Some(x) = args.username { builder.add_username(x); }
    if let Some(x) = args.public_key_der { builder.add_public_key_der(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> RsaPacketT {
    let public_key_der = self.public_key_der().map(|x| {
      x.to_vec()
    });
    let username = self.username().map(|x| {
      x.to_string()
    });
    RsaPacketT {
      public_key_der,
      username,
    }
  }

  #[inline]
  pub fn public_key_der(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(RsaPacket::VT_PUBLIC_KEY_DER, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn username(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RsaPacket::VT_USERNAME, None)
  }
}

impl flatbuffers::Verifiable for RsaPacket<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("public_key_der", Self::VT_PUBLIC_KEY_DER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("username", Self::VT_USERNAME, false)?
     .finish();
    Ok(())
  }
}
pub struct RsaPacketArgs<'a> {
    pub public_key_der: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub username: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for RsaPacketArgs<'a> {
  #[inline]
  fn default() -> Self {
    RsaPacketArgs {
      public_key_der: None,
      username: None,
    }
  }
}

pub struct RsaPacketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RsaPacketBuilder<'a, 'b> {
  #[inline]
  pub fn add_public_key_der(&mut self, public_key_der: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RsaPacket::VT_PUBLIC_KEY_DER, public_key_der);
  }
  #[inline]
  pub fn add_username(&mut self, username: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RsaPacket::VT_USERNAME, username);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RsaPacketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RsaPacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RsaPacket<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RsaPacket<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RsaPacket");
      ds.field("public_key_der", &self.public_key_der());
      ds.field("username", &self.username());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RsaPacketT {
  pub public_key_der: Option<Vec<u8>>,
  pub username: Option<String>,
}
impl Default for RsaPacketT {
  fn default() -> Self {
    Self {
      public_key_der: None,
      username: None,
    }
  }
}
impl RsaPacketT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<RsaPacket<'b>> {
    let public_key_der = self.public_key_der.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let username = self.username.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    RsaPacket::create(_fbb, &RsaPacketArgs{
      public_key_der,
      username,
    })
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_rsa_packet<'a>(buf: &'a [u8]) -> RsaPacket<'a> {
  unsafe { flatbuffers::root_unchecked::<RsaPacket<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_rsa_packet<'a>(buf: &'a [u8]) -> RsaPacket<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<RsaPacket<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `RsaPacket`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rsa_packet_unchecked`.
pub fn root_as_rsa_packet(buf: &[u8]) -> Result<RsaPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RsaPacket>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RsaPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_rsa_packet_unchecked`.
pub fn size_prefixed_root_as_rsa_packet(buf: &[u8]) -> Result<RsaPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RsaPacket>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RsaPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rsa_packet_unchecked`.
pub fn root_as_rsa_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RsaPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RsaPacket<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RsaPacket` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rsa_packet_unchecked`.
pub fn size_prefixed_root_as_rsa_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RsaPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RsaPacket<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RsaPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RsaPacket`.
pub unsafe fn root_as_rsa_packet_unchecked(buf: &[u8]) -> RsaPacket {
  flatbuffers::root_unchecked::<RsaPacket>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RsaPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RsaPacket`.
pub unsafe fn size_prefixed_root_as_rsa_packet_unchecked(buf: &[u8]) -> RsaPacket {
  flatbuffers::size_prefixed_root_unchecked::<RsaPacket>(buf)
}
#[inline]
pub fn finish_rsa_packet_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<RsaPacket<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_rsa_packet_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<RsaPacket<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod protocol
}  // pub mod videocall

