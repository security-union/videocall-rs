// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `types/server_connection_packet.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

///  Data transfer information
// @@protoc_insertion_point(message:server_connection_packet.DataTransferInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataTransferInfo {
    // message fields
    // @@protoc_insertion_point(field:server_connection_packet.DataTransferInfo.bytes_sent)
    pub bytes_sent: u64,
    // @@protoc_insertion_point(field:server_connection_packet.DataTransferInfo.bytes_received)
    pub bytes_received: u64,
    // special fields
    // @@protoc_insertion_point(special_field:server_connection_packet.DataTransferInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataTransferInfo {
    fn default() -> &'a DataTransferInfo {
        <DataTransferInfo as ::protobuf::Message>::default_instance()
    }
}

impl DataTransferInfo {
    pub fn new() -> DataTransferInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bytes_sent",
            |m: &DataTransferInfo| { &m.bytes_sent },
            |m: &mut DataTransferInfo| { &mut m.bytes_sent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bytes_received",
            |m: &DataTransferInfo| { &m.bytes_received },
            |m: &mut DataTransferInfo| { &mut m.bytes_received },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataTransferInfo>(
            "DataTransferInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataTransferInfo {
    const NAME: &'static str = "DataTransferInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.bytes_sent = is.read_uint64()?;
                },
                16 => {
                    self.bytes_received = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.bytes_sent != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.bytes_sent);
        }
        if self.bytes_received != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.bytes_received);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.bytes_sent != 0 {
            os.write_uint64(1, self.bytes_sent)?;
        }
        if self.bytes_received != 0 {
            os.write_uint64(2, self.bytes_received)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataTransferInfo {
        DataTransferInfo::new()
    }

    fn clear(&mut self) {
        self.bytes_sent = 0;
        self.bytes_received = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataTransferInfo {
        static instance: DataTransferInfo = DataTransferInfo {
            bytes_sent: 0,
            bytes_received: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataTransferInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataTransferInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataTransferInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataTransferInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Connection metadata
// @@protoc_insertion_point(message:server_connection_packet.ConnectionMetadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ConnectionMetadata {
    // message fields
    // @@protoc_insertion_point(field:server_connection_packet.ConnectionMetadata.session_id)
    pub session_id: ::std::string::String,
    // @@protoc_insertion_point(field:server_connection_packet.ConnectionMetadata.customer_email)
    pub customer_email: ::std::string::String,
    // @@protoc_insertion_point(field:server_connection_packet.ConnectionMetadata.meeting_id)
    pub meeting_id: ::std::string::String,
    // @@protoc_insertion_point(field:server_connection_packet.ConnectionMetadata.protocol)
    pub protocol: ::std::string::String,
    // @@protoc_insertion_point(field:server_connection_packet.ConnectionMetadata.server_instance)
    pub server_instance: ::std::string::String,
    // @@protoc_insertion_point(field:server_connection_packet.ConnectionMetadata.region)
    pub region: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:server_connection_packet.ConnectionMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectionMetadata {
    fn default() -> &'a ConnectionMetadata {
        <ConnectionMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionMetadata {
    pub fn new() -> ConnectionMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "session_id",
            |m: &ConnectionMetadata| { &m.session_id },
            |m: &mut ConnectionMetadata| { &mut m.session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customer_email",
            |m: &ConnectionMetadata| { &m.customer_email },
            |m: &mut ConnectionMetadata| { &mut m.customer_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "meeting_id",
            |m: &ConnectionMetadata| { &m.meeting_id },
            |m: &mut ConnectionMetadata| { &mut m.meeting_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "protocol",
            |m: &ConnectionMetadata| { &m.protocol },
            |m: &mut ConnectionMetadata| { &mut m.protocol },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "server_instance",
            |m: &ConnectionMetadata| { &m.server_instance },
            |m: &mut ConnectionMetadata| { &mut m.server_instance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "region",
            |m: &ConnectionMetadata| { &m.region },
            |m: &mut ConnectionMetadata| { &mut m.region },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConnectionMetadata>(
            "ConnectionMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConnectionMetadata {
    const NAME: &'static str = "ConnectionMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.session_id = is.read_string()?;
                },
                18 => {
                    self.customer_email = is.read_string()?;
                },
                26 => {
                    self.meeting_id = is.read_string()?;
                },
                34 => {
                    self.protocol = is.read_string()?;
                },
                42 => {
                    self.server_instance = is.read_string()?;
                },
                50 => {
                    self.region = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.session_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_id);
        }
        if !self.customer_email.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.customer_email);
        }
        if !self.meeting_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.meeting_id);
        }
        if !self.protocol.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.protocol);
        }
        if !self.server_instance.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.server_instance);
        }
        if !self.region.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.region);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.session_id.is_empty() {
            os.write_string(1, &self.session_id)?;
        }
        if !self.customer_email.is_empty() {
            os.write_string(2, &self.customer_email)?;
        }
        if !self.meeting_id.is_empty() {
            os.write_string(3, &self.meeting_id)?;
        }
        if !self.protocol.is_empty() {
            os.write_string(4, &self.protocol)?;
        }
        if !self.server_instance.is_empty() {
            os.write_string(5, &self.server_instance)?;
        }
        if !self.region.is_empty() {
            os.write_string(6, &self.region)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConnectionMetadata {
        ConnectionMetadata::new()
    }

    fn clear(&mut self) {
        self.session_id.clear();
        self.customer_email.clear();
        self.meeting_id.clear();
        self.protocol.clear();
        self.server_instance.clear();
        self.region.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectionMetadata {
        static instance: ConnectionMetadata = ConnectionMetadata {
            session_id: ::std::string::String::new(),
            customer_email: ::std::string::String::new(),
            meeting_id: ::std::string::String::new(),
            protocol: ::std::string::String::new(),
            server_instance: ::std::string::String::new(),
            region: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectionMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectionMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectionMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Main server connection event packet
// @@protoc_insertion_point(message:server_connection_packet.ServerConnectionPacket)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerConnectionPacket {
    // message fields
    // @@protoc_insertion_point(field:server_connection_packet.ServerConnectionPacket.event_type)
    pub event_type: ::protobuf::EnumOrUnknown<EventType>,
    // @@protoc_insertion_point(field:server_connection_packet.ServerConnectionPacket.timestamp_ms)
    pub timestamp_ms: u64,
    // @@protoc_insertion_point(field:server_connection_packet.ServerConnectionPacket.connection)
    pub connection: ::protobuf::MessageField<ConnectionMetadata>,
    ///  Optional fields based on event type
    // @@protoc_insertion_point(field:server_connection_packet.ServerConnectionPacket.data_transfer)
    pub data_transfer: ::protobuf::MessageField<DataTransferInfo>,
    // @@protoc_insertion_point(field:server_connection_packet.ServerConnectionPacket.connection_duration_ms)
    pub connection_duration_ms: u64,
    ///  Additional context
    // @@protoc_insertion_point(field:server_connection_packet.ServerConnectionPacket.is_reconnection)
    pub is_reconnection: bool,
    // special fields
    // @@protoc_insertion_point(special_field:server_connection_packet.ServerConnectionPacket.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServerConnectionPacket {
    fn default() -> &'a ServerConnectionPacket {
        <ServerConnectionPacket as ::protobuf::Message>::default_instance()
    }
}

impl ServerConnectionPacket {
    pub fn new() -> ServerConnectionPacket {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event_type",
            |m: &ServerConnectionPacket| { &m.event_type },
            |m: &mut ServerConnectionPacket| { &mut m.event_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp_ms",
            |m: &ServerConnectionPacket| { &m.timestamp_ms },
            |m: &mut ServerConnectionPacket| { &mut m.timestamp_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ConnectionMetadata>(
            "connection",
            |m: &ServerConnectionPacket| { &m.connection },
            |m: &mut ServerConnectionPacket| { &mut m.connection },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, DataTransferInfo>(
            "data_transfer",
            |m: &ServerConnectionPacket| { &m.data_transfer },
            |m: &mut ServerConnectionPacket| { &mut m.data_transfer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_duration_ms",
            |m: &ServerConnectionPacket| { &m.connection_duration_ms },
            |m: &mut ServerConnectionPacket| { &mut m.connection_duration_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_reconnection",
            |m: &ServerConnectionPacket| { &m.is_reconnection },
            |m: &mut ServerConnectionPacket| { &mut m.is_reconnection },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerConnectionPacket>(
            "ServerConnectionPacket",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServerConnectionPacket {
    const NAME: &'static str = "ServerConnectionPacket";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event_type = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.timestamp_ms = is.read_uint64()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.connection)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.data_transfer)?;
                },
                40 => {
                    self.connection_duration_ms = is.read_uint64()?;
                },
                48 => {
                    self.is_reconnection = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.event_type != ::protobuf::EnumOrUnknown::new(EventType::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.event_type.value());
        }
        if self.timestamp_ms != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.timestamp_ms);
        }
        if let Some(v) = self.connection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.data_transfer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.connection_duration_ms != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.connection_duration_ms);
        }
        if self.is_reconnection != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.event_type != ::protobuf::EnumOrUnknown::new(EventType::UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.event_type))?;
        }
        if self.timestamp_ms != 0 {
            os.write_uint64(2, self.timestamp_ms)?;
        }
        if let Some(v) = self.connection.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.data_transfer.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.connection_duration_ms != 0 {
            os.write_uint64(5, self.connection_duration_ms)?;
        }
        if self.is_reconnection != false {
            os.write_bool(6, self.is_reconnection)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServerConnectionPacket {
        ServerConnectionPacket::new()
    }

    fn clear(&mut self) {
        self.event_type = ::protobuf::EnumOrUnknown::new(EventType::UNKNOWN);
        self.timestamp_ms = 0;
        self.connection.clear();
        self.data_transfer.clear();
        self.connection_duration_ms = 0;
        self.is_reconnection = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServerConnectionPacket {
        static instance: ServerConnectionPacket = ServerConnectionPacket {
            event_type: ::protobuf::EnumOrUnknown::from_i32(0),
            timestamp_ms: 0,
            connection: ::protobuf::MessageField::none(),
            data_transfer: ::protobuf::MessageField::none(),
            connection_duration_ms: 0,
            is_reconnection: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServerConnectionPacket {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServerConnectionPacket").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServerConnectionPacket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerConnectionPacket {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Server connection event types
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:server_connection_packet.EventType)
pub enum EventType {
    // @@protoc_insertion_point(enum_value:server_connection_packet.EventType.UNKNOWN)
    UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:server_connection_packet.EventType.CONNECTION_STARTED)
    CONNECTION_STARTED = 1,
    // @@protoc_insertion_point(enum_value:server_connection_packet.EventType.CONNECTION_ENDED)
    CONNECTION_ENDED = 2,
    // @@protoc_insertion_point(enum_value:server_connection_packet.EventType.DATA_TRANSFERRED)
    DATA_TRANSFERRED = 3,
}

impl ::protobuf::Enum for EventType {
    const NAME: &'static str = "EventType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::UNKNOWN),
            1 => ::std::option::Option::Some(EventType::CONNECTION_STARTED),
            2 => ::std::option::Option::Some(EventType::CONNECTION_ENDED),
            3 => ::std::option::Option::Some(EventType::DATA_TRANSFERRED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EventType> {
        match str {
            "UNKNOWN" => ::std::option::Option::Some(EventType::UNKNOWN),
            "CONNECTION_STARTED" => ::std::option::Option::Some(EventType::CONNECTION_STARTED),
            "CONNECTION_ENDED" => ::std::option::Option::Some(EventType::CONNECTION_ENDED),
            "DATA_TRANSFERRED" => ::std::option::Option::Some(EventType::DATA_TRANSFERRED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EventType] = &[
        EventType::UNKNOWN,
        EventType::CONNECTION_STARTED,
        EventType::CONNECTION_ENDED,
        EventType::DATA_TRANSFERRED,
    ];
}

impl ::protobuf::EnumFull for EventType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EventType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::UNKNOWN
    }
}

impl EventType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EventType>("EventType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$types/server_connection_packet.proto\x12\x18server_connection_packet\
    \"X\n\x10DataTransferInfo\x12\x1d\n\nbytes_sent\x18\x01\x20\x01(\x04R\tb\
    ytesSent\x12%\n\x0ebytes_received\x18\x02\x20\x01(\x04R\rbytesReceived\"\
    \xd6\x01\n\x12ConnectionMetadata\x12\x1d\n\nsession_id\x18\x01\x20\x01(\
    \tR\tsessionId\x12%\n\x0ecustomer_email\x18\x02\x20\x01(\tR\rcustomerEma\
    il\x12\x1d\n\nmeeting_id\x18\x03\x20\x01(\tR\tmeetingId\x12\x1a\n\x08pro\
    tocol\x18\x04\x20\x01(\tR\x08protocol\x12'\n\x0fserver_instance\x18\x05\
    \x20\x01(\tR\x0eserverInstance\x12\x16\n\x06region\x18\x06\x20\x01(\tR\
    \x06region\"\xfd\x02\n\x16ServerConnectionPacket\x12B\n\nevent_type\x18\
    \x01\x20\x01(\x0e2#.server_connection_packet.EventTypeR\teventType\x12!\
    \n\x0ctimestamp_ms\x18\x02\x20\x01(\x04R\x0btimestampMs\x12L\n\nconnecti\
    on\x18\x03\x20\x01(\x0b2,.server_connection_packet.ConnectionMetadataR\n\
    connection\x12O\n\rdata_transfer\x18\x04\x20\x01(\x0b2*.server_connectio\
    n_packet.DataTransferInfoR\x0cdataTransfer\x124\n\x16connection_duration\
    _ms\x18\x05\x20\x01(\x04R\x14connectionDurationMs\x12'\n\x0fis_reconnect\
    ion\x18\x06\x20\x01(\x08R\x0eisReconnection*\\\n\tEventType\x12\x0b\n\
    \x07UNKNOWN\x10\0\x12\x16\n\x12CONNECTION_STARTED\x10\x01\x12\x14\n\x10C\
    ONNECTION_ENDED\x10\x02\x12\x14\n\x10DATA_TRANSFERRED\x10\x03J\x90\x0b\n\
    \x06\x12\x04\0\0(\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0!\n+\n\x02\x05\0\x12\x04\x05\0\n\x01\x1a\x1f\x20Server\x20\
    connection\x20event\x20types\n\n\n\n\x03\x05\0\x01\x12\x03\x05\x05\x0e\n\
    \x0b\n\x04\x05\0\x02\0\x12\x03\x06\x02\x0e\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03\x06\x02\t\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x06\x0c\r\n\x0b\n\
    \x04\x05\0\x02\x01\x12\x03\x07\x02\x19\n\x0c\n\x05\x05\0\x02\x01\x01\x12\
    \x03\x07\x02\x14\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x07\x17\x18\n\x0b\
    \n\x04\x05\0\x02\x02\x12\x03\x08\x02\x17\n\x0c\n\x05\x05\0\x02\x02\x01\
    \x12\x03\x08\x02\x12\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x08\x15\x16\n\
    \x0b\n\x04\x05\0\x02\x03\x12\x03\t\x02\x17\n\x0c\n\x05\x05\0\x02\x03\x01\
    \x12\x03\t\x02\x12\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\t\x15\x16\n'\n\
    \x02\x04\0\x12\x04\r\0\x10\x01\x1a\x1b\x20Data\x20transfer\x20informatio\
    n\n\n\n\n\x03\x04\0\x01\x12\x03\r\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x0e\x02\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0e\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x0e\t\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x0e\x16\x17\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0f\x02\x1c\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x0f\t\x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f\x1a\x1b\n!\
    \n\x02\x04\x01\x12\x04\x13\0\x1a\x01\x1a\x15\x20Connection\x20metadata\n\
    \n\n\n\x03\x04\x01\x01\x12\x03\x13\x08\x1a\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x14\x02\x18\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x14\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\x14\t\x13\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x14\x16\x17\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x15\x02\x1c\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x15\t\x17\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x15\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x16\x02\x18\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x16\t\x13\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x16\x16\x17\n\
    2\n\x04\x04\x01\x02\x03\x12\x03\x17\x02\x16\"%\x20\"websocket\",\x20\"we\
    btransport\",\x20\"quic\"\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x17\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x17\t\x11\n\x0c\n\x05\
    \x04\x01\x02\x03\x03\x12\x03\x17\x14\x15\n0\n\x04\x04\x01\x02\x04\x12\
    \x03\x18\x02\x1d\"#\x20K8s\x20pod\x20name\x20or\x20server\x20identifier\
    \n\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x04\x01\x12\x03\x18\t\x18\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\
    \x03\x18\x1b\x1c\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x19\x02\x14\n\x0c\n\
    \x05\x04\x01\x02\x05\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\
    \x01\x12\x03\x19\t\x0f\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x19\x12\
    \x13\n1\n\x02\x04\x02\x12\x04\x1d\0(\x01\x1a%\x20Main\x20server\x20conne\
    ction\x20event\x20packet\n\n\n\n\x03\x04\x02\x01\x12\x03\x1d\x08\x1e\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x1e\x02\x1b\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x03\x1e\x02\x0b\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1e\x0c\
    \x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1e\x19\x1a\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03\x1f\x02\x1a\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\
    \x1f\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1f\t\x15\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03\x1f\x18\x19\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03\x20\x02$\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x20\x02\x14\n\
    \x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x20\x15\x1f\n\x0c\n\x05\x04\x02\
    \x02\x02\x03\x12\x03\x20\"#\nQ\n\x04\x04\x02\x02\x03\x12\x03#\x02%\x1a%\
    \x20Optional\x20fields\x20based\x20on\x20event\x20type\n\"\x1d\x20For\
    \x20DATA_TRANSFERRED\x20events\n\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03\
    #\x02\x12\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03#\x13\x20\n\x0c\n\x05\
    \x04\x02\x02\x03\x03\x12\x03##$\n*\n\x04\x04\x02\x02\x04\x12\x03$\x02$\"\
    \x1d\x20For\x20CONNECTION_ENDED\x20events\n\n\x0c\n\x05\x04\x02\x02\x04\
    \x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03$\t\x1f\n\
    \x0c\n\x05\x04\x02\x02\x04\x03\x12\x03$\"#\nL\n\x04\x04\x02\x02\x05\x12\
    \x03'\x02\x1b\x1a\x14\x20Additional\x20context\n\")\x20True\x20if\x20thi\
    s\x20is\x20a\x20detected\x20reconnection\n\n\x0c\n\x05\x04\x02\x02\x05\
    \x05\x12\x03'\x02\x06\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03'\x07\x16\n\
    \x0c\n\x05\x04\x02\x02\x05\x03\x12\x03'\x19\x1ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(DataTransferInfo::generated_message_descriptor_data());
            messages.push(ConnectionMetadata::generated_message_descriptor_data());
            messages.push(ServerConnectionPacket::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(EventType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
